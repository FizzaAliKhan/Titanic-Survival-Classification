# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LP9jWP7ojkoTJoeE3mG3oEwfU55vtesB
"""

# Titanic Survival Prediction using Machine Learning

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 2: Load the dataset
# Replace 'train.csv' with the path to your Titanic dataset
df = pd.read_csv('/tested.csv')

# Step 3: Select relevant features
# We'll use: Pclass, Sex, Age, Fare to predict Survived
df = df[['Survived', 'Pclass', 'Sex', 'Age', 'Fare']]

# Step 4: Handle missing values
# Fill missing Age values with the median
df['Age'].fillna(df['Age'].median(), inplace=True)

# Step 5: Encode categorical variables
# Convert 'Sex' column to numeric: male=1, female=0
label_encoder = LabelEncoder()
df['Sex'] = label_encoder.fit_transform(df['Sex'])

# Step 6: Define features (X) and target (y)
X = df[['Pclass', 'Sex', 'Age', 'Fare']]
y = df['Survived']

# Step 7: Split the data into training and testing sets
# 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 8: Train the model using Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 9: Make predictions
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))